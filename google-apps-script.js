// üìä GOOGLE APPS SCRIPT - BRIEFING RECEPTOR
// Este script recebe os dados do formul√°rio de briefing e salva no Google Sheets

// üîß CONFIGURA√á√ÉO
const CONFIG = {
  SHEET_ID: 'COLE_AQUI_O_ID_DA_SUA_PLANILHA', // Substitua pelo ID da sua planilha
  SHEET_NAME: 'Briefings',                     // Nome da aba na planilha
  EMAIL_NOTIFICACAO: 'rodrigorochagiuntini@bityx.app', // Email para notifica√ß√µes
  ENVIAR_EMAIL: true                           // true para enviar email de notifica√ß√£o
};

// üì® FUN√á√ÉO PRINCIPAL - Recebe dados via POST
function doPost(e) {
  try {
    console.log('üì© Dados recebidos:', e.postData.contents);
    
    // Parse dos dados recebidos
    const data = JSON.parse(e.postData.contents);
    
    // Salvar na planilha
    const resultado = salvarNaPlanilha(data);
    
    // Enviar notifica√ß√£o por email (opcional)
    if (CONFIG.ENVIAR_EMAIL) {
      enviarNotificacaoEmail(data);
    }
    
    // Retorno de sucesso
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: 'Briefing salvo com sucesso!',
        timestamp: new Date().toISOString(),
        linha: resultado.linha
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    console.error('‚ùå Erro ao processar briefing:', error);
    
    // Retorno de erro
    return ContentService
      .createTextOutput(JSON.stringify({
        success: false,
        error: error.toString(),
        timestamp: new Date().toISOString()
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// üíæ SALVAR DADOS NA PLANILHA
function salvarNaPlanilha(data) {
  try {
    // Abrir planilha
    const sheet = obterOuCriarPlanilha();
    
    // Preparar dados para inser√ß√£o
    const linha = [
      data.timestamp || new Date().toISOString(),
      data.cliente || 'Willian',
      data.nomeArtistico || '',
      data.areaAtuacao || '',
      data.bioDescricao || '',
      data.vibe || '',
      data.corPrincipal || '',
      data.temLogo || '',
      data.quantidadeProjetos || '',
      data.linksProjetos || '',
      data.infosProjetos || '',
      data.referencia || '',
      data.outrasReferencias || '',
      data.secao || '',
      data.secaoExtra || '',
      data.instagram || '',
      data.whatsapp || '',
      data.emailOrcamento || '',
      data.outrasRedes || '',
      data.fraseImpacto || '',
      data.historiaEspecial || '',
      data.funcionalidadeEspecial || '',
      data.observacoes || '',
      data.dadosCompletos || JSON.stringify(data)
    ];
    
    // Inserir na planilha
    const range = sheet.appendRow(linha);
    const linhaNumero = sheet.getLastRow();
    
    console.log(`‚úÖ Dados salvos na linha ${linhaNumero}`);
    
    return {
      sucesso: true,
      linha: linhaNumero,
      range: range
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao salvar na planilha:', error);
    throw error;
  }
}

// üìã OBTER OU CRIAR PLANILHA
function obterOuCriarPlanilha() {
  try {
    const spreadsheet = SpreadsheetApp.openById(CONFIG.SHEET_ID);
    let sheet;
    
    // Tentar obter a aba existente
    try {
      sheet = spreadsheet.getSheetByName(CONFIG.SHEET_NAME);
    } catch (e) {
      // Se n√£o existir, criar nova aba
      sheet = spreadsheet.insertSheet(CONFIG.SHEET_NAME);
    }
    
    // Se √© a primeira vez, criar cabe√ßalhos
    if (sheet.getLastRow() === 0) {
      criarCabecalhos(sheet);
    }
    
    return sheet;
    
  } catch (error) {
    console.error('‚ùå Erro ao acessar planilha:', error);
    throw new Error(`Erro ao acessar planilha: ${error.message}`);
  }
}

// üìä CRIAR CABE√áALHOS DA PLANILHA
function criarCabecalhos(sheet) {
  const cabecalhos = [
    'Timestamp',
    'Cliente', 
    'Nome Art√≠stico',
    '√Årea de Atua√ß√£o',
    'Bio/Descri√ß√£o',
    'Vibe/Estilo',
    'Cor Principal',
    'Tem Logo',
    'Quantidade Projetos',
    'Links dos Projetos',
    'Info dos Projetos',
    'Refer√™ncias (Rafa Webber)',
    'Outras Refer√™ncias',
    'Se√ß√µes do Site',
    'Se√ß√£o Extra',
    'Instagram',
    'WhatsApp',
    'Email Or√ßamento',
    'Outras Redes',
    'Frase de Impacto',
    'Hist√≥ria Especial',
    'Funcionalidade Especial',
    'Observa√ß√µes',
    'JSON Completo'
  ];
  
  // Inserir cabe√ßalhos
  const range = sheet.getRange(1, 1, 1, cabecalhos.length);
  range.setValues([cabecalhos]);
  
  // Formata√ß√£o dos cabe√ßalhos
  range.setFontWeight('bold');
  range.setBackground('#4285f4');
  range.setFontColor('#ffffff');
  
  // Auto-ajustar largura das colunas
  sheet.autoResizeColumns(1, cabecalhos.length);
  
  console.log('üìä Cabe√ßalhos criados na planilha');
}

// üìß ENVIAR NOTIFICA√á√ÉO POR EMAIL
function enviarNotificacaoEmail(data) {
  try {
    const assunto = `üé¨ Novo Briefing - ${data.nomeArtistico || 'Willian'}`;
    
    const corpo = `
    <h2>üé¨ Novo Briefing Recebido!</h2>
    
    <h3>üìã Informa√ß√µes B√°sicas:</h3>
    <ul>
      <li><strong>Cliente:</strong> ${data.cliente || 'Willian'}</li>
      <li><strong>Nome Art√≠stico:</strong> ${data.nomeArtistico || 'N√£o informado'}</li>
      <li><strong>√Årea:</strong> ${data.areaAtuacao || 'N√£o informado'}</li>
      <li><strong>Email:</strong> ${data.emailOrcamento || 'N√£o informado'}</li>
      <li><strong>WhatsApp:</strong> ${data.whatsapp || 'N√£o informado'}</li>
    </ul>
    
    <h3>üé® Estilo Visual:</h3>
    <ul>
      <li><strong>Vibe:</strong> ${data.vibe || 'N√£o informado'}</li>
      <li><strong>Cores:</strong> ${data.corPrincipal || 'N√£o informado'}</li>
      <li><strong>Tem Logo:</strong> ${data.temLogo || 'N√£o informado'}</li>
    </ul>
    
    <h3>üé¨ Projetos:</h3>
    <ul>
      <li><strong>Quantidade:</strong> ${data.quantidadeProjetos || 'N√£o informado'}</li>
      <li><strong>Links:</strong> ${data.linksProjetos ? data.linksProjetos.substring(0, 200) + '...' : 'N√£o informado'}</li>
    </ul>
    
    <h3>üì± Contatos:</h3>
    <ul>
      <li><strong>Instagram:</strong> ${data.instagram || 'N√£o informado'}</li>
      <li><strong>WhatsApp:</strong> ${data.whatsapp || 'N√£o informado'}</li>
      <li><strong>Email:</strong> ${data.emailOrcamento || 'N√£o informado'}</li>
    </ul>
    
    <p><em>üìä Dados completos salvos na planilha: <a href="https://docs.google.com/spreadsheets/d/${CONFIG.SHEET_ID}">Abrir Planilha</a></em></p>
    
    <hr>
    <p><small>üìÖ Enviado automaticamente em ${new Date().toLocaleString('pt-BR')}</small></p>
    `;
    
    MailApp.sendEmail({
      to: CONFIG.EMAIL_NOTIFICACAO,
      subject: assunto,
      htmlBody: corpo
    });
    
    console.log('üìß Email de notifica√ß√£o enviado');
    
  } catch (error) {
    console.error('‚ùå Erro ao enviar email:', error);
    // N√£o propagar o erro - email √© opcional
  }
}

// üß™ FUN√á√ÉO DE TESTE
function testarScript() {
  const dadosTeste = {
    timestamp: new Date().toISOString(),
    cliente: 'Willian',
    nomeArtistico: 'Willian Films',
    areaAtuacao: 'Videomaker',
    bioDescricao: 'Teste de bio',
    vibe: 'Clean, Moderno',
    emailOrcamento: 'teste@exemplo.com',
    whatsapp: '(11) 99999-9999'
  };
  
  console.log('üß™ Iniciando teste...');
  
  try {
    const resultado = salvarNaPlanilha(dadosTeste);
    console.log('‚úÖ Teste conclu√≠do com sucesso:', resultado);
    return resultado;
  } catch (error) {
    console.error('‚ùå Teste falhou:', error);
    throw error;
  }
}

// üìã FUN√á√ÉO PARA LISTAR BRIEFINGS
function listarBriefings() {
  try {
    const sheet = obterOuCriarPlanilha();
    const dados = sheet.getDataRange().getValues();
    
    console.log(`üìã Total de briefings: ${dados.length - 1}`); // -1 para excluir cabe√ßalho
    
    return dados;
  } catch (error) {
    console.error('‚ùå Erro ao listar briefings:', error);
    throw error;
  }
}

// üóëÔ∏è FUN√á√ÉO PARA LIMPAR DADOS DE TESTE
function limparDadosTeste() {
  try {
    const sheet = obterOuCriarPlanilha();
    const dados = sheet.getDataRange().getValues();
    
    // Manter apenas cabe√ßalho
    sheet.clear();
    if (dados.length > 0) {
      sheet.getRange(1, 1, 1, dados[0].length).setValues([dados[0]]);
    }
    
    console.log('üóëÔ∏è Dados de teste limpos');
  } catch (error) {
    console.error('‚ùå Erro ao limpar dados:', error);
    throw error;
  }
}

// üìù INSTRU√á√ïES DE USO:
//
// 1. Cole este c√≥digo no Google Apps Script
// 2. Substitua CONFIG.SHEET_ID pelo ID da sua planilha
// 3. Configure CONFIG.EMAIL_NOTIFICACAO se desejar receber emails
// 4. Salve e implante como Web App
// 5. Configure as permiss√µes necess√°rias
// 6. Copie a URL do Web App
// 7. Use a URL no arquivo config.js do briefing
//
// üîß CONFIGURA√á√ÉO DA PLANILHA:
// Para obter o SHEET_ID:
// 1. Abra uma planilha no Google Sheets
// 2. Copie o ID da URL: https://docs.google.com/spreadsheets/d/[SHEET_ID]/edit
// 3. Cole no CONFIG.SHEET_ID acima
//
// ‚úÖ TESTE:
// Execute a fun√ß√£o 'testarScript()' para verificar se tudo est√° funcionando 